/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Administrador;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-17T11:57:22.023517+02:00[Europe/Madrid]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "Administradores", description = "Operaciones relacionadas con los administradores.")
public interface AdminApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /admin : Obtener todos los administradores
     * Devuelve una lista de todos los administradores.
     *
     * @return Lista de administradores obtenida exitosamente. (status code 200)
     */
    @Operation(
        operationId = "adminGet",
        summary = "Obtener todos los administradores",
        description = "Devuelve una lista de todos los administradores.",
        tags = { "Administradores" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de administradores obtenida exitosamente.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Administrador.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/admin",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Administrador>> adminGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"apellidos\" : \"apellidos\", \"password\" : \"password\", \"fecha_de_nacimiento\" : \"DD/MM/AAAA\", \"id\" : 0, \"nombre\" : \"nombre\", \"email\" : \"nombre@email.com\" }, { \"apellidos\" : \"apellidos\", \"password\" : \"password\", \"fecha_de_nacimiento\" : \"DD/MM/AAAA\", \"id\" : 0, \"nombre\" : \"nombre\", \"email\" : \"nombre@email.com\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /admin/{id_de_usuario} : Borrar un administrador
     * Borra un administrador específico por su ID.
     *
     * @param idDeUsuario ID del administrador. (required)
     * @return Administrador borrado exitosamente. (status code 204)
     *         or Administrador no encontrado. (status code 404)
     */
    @Operation(
        operationId = "adminIdDeUsuarioDelete",
        summary = "Borrar un administrador",
        description = "Borra un administrador específico por su ID.",
        tags = { "Administradores" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Administrador borrado exitosamente."),
            @ApiResponse(responseCode = "404", description = "Administrador no encontrado.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/admin/{id_de_usuario}"
    )
    
    default ResponseEntity<Void> adminIdDeUsuarioDelete(
        @Parameter(name = "id_de_usuario", description = "ID del administrador.", required = true, in = ParameterIn.PATH) @PathVariable("id_de_usuario") Integer idDeUsuario
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /admin/{id_de_usuario} : Obtener detalles de un administrador
     * Devuelve los detalles de un administrador por su ID.
     *
     * @param idDeUsuario ID del administrador. (required)
     * @return Detalles del administrador obtenidos exitosamente. (status code 200)
     *         or Administrador no encontrado. (status code 404)
     */
    @Operation(
        operationId = "adminIdDeUsuarioGet",
        summary = "Obtener detalles de un administrador",
        description = "Devuelve los detalles de un administrador por su ID.",
        tags = { "Administradores" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Detalles del administrador obtenidos exitosamente.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Administrador.class))
            }),
            @ApiResponse(responseCode = "404", description = "Administrador no encontrado.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/admin/{id_de_usuario}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Administrador> adminIdDeUsuarioGet(
        @Parameter(name = "id_de_usuario", description = "ID del administrador.", required = true, in = ParameterIn.PATH) @PathVariable("id_de_usuario") Integer idDeUsuario
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"apellidos\" : \"apellidos\", \"password\" : \"password\", \"fecha_de_nacimiento\" : \"DD/MM/AAAA\", \"id\" : 0, \"nombre\" : \"nombre\", \"email\" : \"nombre@email.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /admin/{id_de_usuario} : Actualizar credenciales de un administrador
     * Actualiza las credenciales de un administrador
     *
     * @param idDeUsuario ID del administrador específico. (required)
     * @param administrador  (required)
     * @return Credenciales actualizadas exitosamente. (status code 200)
     *         or Datos inválidos proporcionados. (status code 400)
     */
    @Operation(
        operationId = "adminIdDeUsuarioPut",
        summary = "Actualizar credenciales de un administrador",
        description = "Actualiza las credenciales de un administrador",
        tags = { "Administradores" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Credenciales actualizadas exitosamente."),
            @ApiResponse(responseCode = "400", description = "Datos inválidos proporcionados.")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/admin/{id_de_usuario}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> adminIdDeUsuarioPut(
        @Parameter(name = "id_de_usuario", description = "ID del administrador específico.", required = true, in = ParameterIn.PATH) @PathVariable("id_de_usuario") Integer idDeUsuario,
        @Parameter(name = "Administrador", description = "", required = true) @Valid @RequestBody Administrador administrador
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /admin : Crear un nuevo administrador
     * Da de alta un nuevo administrador en la aplicación.
     *
     * @param administrador  (required)
     * @return Administrador creado exitosamente. (status code 201)
     *         or Datos inválidos proporcionados. (status code 400)
     */
    @Operation(
        operationId = "adminPost",
        summary = "Crear un nuevo administrador",
        description = "Da de alta un nuevo administrador en la aplicación.",
        tags = { "Administradores" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Administrador creado exitosamente."),
            @ApiResponse(responseCode = "400", description = "Datos inválidos proporcionados.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/admin",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> adminPost(
        @Parameter(name = "Administrador", description = "", required = true) @Valid @RequestBody Administrador administrador
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
