/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Cliente;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.openapitools.services.ClienteDBService;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-17T11:57:22.023517+02:00[Europe/Madrid]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "Clientes", description = "Operaciones relacionadas con los clientes.")
@Component
public interface ClientesApi {
    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /clientes : Obtener todos los clientes
     * Devuelve una lista de todos los clientes.
     *
     * @return Lista de clientes obtenida exitosamente. (status code 200)
     */
    @Operation(operationId = "clientesGet", summary = "Obtener todos los clientes", description = "Devuelve una lista de todos los clientes.", tags = {"Clientes"}, responses = {@ApiResponse(responseCode = "200", description = "Lista de clientes obtenida exitosamente.", content = {@Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Cliente.class)))})})
    @RequestMapping(method = RequestMethod.GET, value = "/clientes", produces = {"application/json"})
    default ResponseEntity<List<Cliente>> clientesGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"apellidos\" : \"apellidos\", \"password\" : \"password\", \"numero_tarjeta_de_credito\" : \"numero_tarjeta_de_credito\", \"ccv\" : \"ccv\", \"fecha_de_nacimiento\" : \"DD/MM/AAAA\", \"id\" : 0, \"nombre\" : \"nombre\", \"email\" : \"nombre@email.com\" }, { \"apellidos\" : \"apellidos\", \"password\" : \"password\", \"numero_tarjeta_de_credito\" : \"numero_tarjeta_de_credito\", \"ccv\" : \"ccv\", \"fecha_de_nacimiento\" : \"DD/MM/AAAA\", \"id\" : 0, \"nombre\" : \"nombre\", \"email\" : \"nombre@email.com\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /clientes/{id_de_usuario} : Borrar un cliente
     * Borra un cliente específico por su ID.
     *
     * @param idDeUsuario ID del cliente. (required)
     * @return Cliente borrado exitosamente. (status code 204)
     * or Cliente no encontrado. (status code 404)
     */
    @Operation(operationId = "clientesIdDeUsuarioDelete", summary = "Borrar un cliente", description = "Borra un cliente específico por su ID.", tags = {"Clientes"}, responses = {@ApiResponse(responseCode = "204", description = "Cliente borrado exitosamente."), @ApiResponse(responseCode = "404", description = "Cliente no encontrado.")})
    @RequestMapping(method = RequestMethod.DELETE, value = "/clientes/{id_de_usuario}")

    default ResponseEntity<Void> clientesIdDeUsuarioDelete(@Parameter(name = "id_de_usuario", description = "ID del cliente.", required = true, in = ParameterIn.PATH) @PathVariable("id_de_usuario") Integer idDeUsuario) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /clientes/{id_de_usuario} : Obtener detalles de un cliente
     * Devuelve los detalles de un cliente por su ID.
     *
     * @param idDeUsuario ID del cliente. (required)
     * @return Detalles del cliente obtenidos exitosamente. (status code 200)
     * or Cliente no encontrado. (status code 404)
     */
    @Operation(operationId = "clientesIdDeUsuarioGet", summary = "Obtener detalles de un cliente", description = "Devuelve los detalles de un cliente por su ID.", tags = {"Clientes"}, responses = {@ApiResponse(responseCode = "200", description = "Detalles del cliente obtenidos exitosamente.", content = {@Content(mediaType = "application/json", schema = @Schema(implementation = Cliente.class))}), @ApiResponse(responseCode = "404", description = "Cliente no encontrado.")})
    @RequestMapping(method = RequestMethod.GET, value = "/clientes/{id_de_usuario}", produces = {"application/json"})

    default ResponseEntity<Cliente> clientesIdDeUsuarioGet(@Parameter(name = "id_de_usuario", description = "ID del cliente.", required = true, in = ParameterIn.PATH) @PathVariable("id_de_usuario") Integer idDeUsuario) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"apellidos\" : \"apellidos\", \"password\" : \"password\", \"numero_tarjeta_de_credito\" : \"numero_tarjeta_de_credito\", \"ccv\" : \"ccv\", \"fecha_de_nacimiento\" : \"DD/MM/AAAA\", \"id\" : 0, \"nombre\" : \"nombre\", \"email\" : \"nombre@email.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /clientes/{id_de_usuario} : Actualizar datos de un cliente
     * Actualiza los datos de un cliente específico.
     *
     * @param idDeUsuario ID del cliente. (required)
     * @param cliente     (required)
     * @return Datos del cliente actualizados exitosamente. (status code 200)
     * or Datos inválidos proporcionados. (status code 400)
     */
    @Operation(operationId = "clientesIdDeUsuarioPut", summary = "Actualizar datos de un cliente", description = "Actualiza los datos de un cliente específico.", tags = {"Clientes"}, responses = {@ApiResponse(responseCode = "200", description = "Datos del cliente actualizados exitosamente."), @ApiResponse(responseCode = "400", description = "Datos inválidos proporcionados.")})
    @RequestMapping(method = RequestMethod.PUT, value = "/clientes/{id_de_usuario}", consumes = {"application/json"})

    default ResponseEntity<Void> clientesIdDeUsuarioPut(@Parameter(name = "id_de_usuario", description = "ID del cliente.", required = true, in = ParameterIn.PATH) @PathVariable("id_de_usuario") Integer idDeUsuario, @Parameter(name = "Cliente", description = "", required = true) @Valid @RequestBody Cliente cliente) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /clientes : Crear un nuevo cliente
     * Da de alta un nuevo cliente en la aplicación.
     *
     * @param cliente (required)
     * @return Cliente creado exitosamente. (status code 201)
     * or Datos inválidos proporcionados. (status code 400)
     */
    @Operation(operationId = "clientesPost", summary = "Crear un nuevo cliente", description = "Da de alta un nuevo cliente en la aplicación.", tags = {"Clientes"}, responses = {@ApiResponse(responseCode = "201", description = "Cliente creado exitosamente."), @ApiResponse(responseCode = "400", description = "Datos inválidos proporcionados.")})
    @RequestMapping(method = RequestMethod.POST, value = "/clientes", consumes = {"application/json"})

    default ResponseEntity<Void> clientesPost(@Parameter(name = "Cliente", description = "", required = true) @Valid @RequestBody Cliente cliente) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
